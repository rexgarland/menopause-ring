#include <unity.h>
#include <iostream>
#include "HRFilter.h"
#include "BPMProcessor.h"

#define SAMPLERATE 400

BiQuad f1 = BiQuad(0.00208057, 0.00416113, 0.00208057, -1.86689228,  0.87521455);
BiQuad f2 = BiQuad(0.92704034, -1.09317117,  0.92704034, -1.09317117,  0.85408069);
BiQuad f3 = BiQuad(0.99375596, -0.99375596, 0, -0.98751193, 0);
BiQuad f4 = BiQuad(0.03634612, 0.03634612, 0, -0.92730777, 0);
BiQuad f5 = BiQuad(0.97697628, -0.97697628, 0, -0.9539525, 0);
HRFilter hrfilt;
BPMProcessor bpm(SAMPLERATE);

#define DATALEN 600
long double input_hr_data[DATALEN] = {73350,73371,73363,73361,73367,73356,73373,73340,73363,73349,73342,73371,73350,73360,73348,73332,73343,73323,73325,73310,73292,73300,73275,73273,73262,73248,73239,73216,73188,73164,73129,73124,73082,73048,73017,72979,72934,72896,72880,72842,72809,72784,72748,72747,72704,72682,72691,72652,72652,72667,72647,72660,72655,72652,72641,72662,72663,72680,72685,72711,72699,72702,72738,72740,72735,72772,72789,72786,72811,72834,72832,72867,72892,72906,72908,72927,72950,72954,72989,73013,73016,73016,73053,73067,73076,73068,73086,73122,73121,73131,73132,73156,73158,73182,73210,73185,73178,73211,73231,73185,73229,73234,73229,73267,73246,73246,73247,73256,73240,73250,73268,73264,73248,73275,73268,73292,73273,73254,73251,73266,73240,73267,73261,73267,73272,73276,73296,73279,73286,73280,73261,73261,73289,73250,73265,73274,73290,73278,73279,73290,73284,73280,73311,73297,73290,73292,73297,73282,73277,73316,73299,73274,73299,73293,73286,73300,73283,73294,73295,73283,73292,73295,73316,73300,73304,73317,73307,73311,73331,73318,73296,73304,73327,73317,73328,73328,73315,73322,73337,73320,73329,73334,73322,73321,73336,73335,73349,73342,73332,73328,73356,73351,73326,73341,73329,73338,73354,73356,73341,73339,73351,73330,73350,73358,73354,73351,73327,73353,73353,73354,73360,73357,73341,73375,73365,73356,73378,73359,73347,73366,73351,73343,73353,73368,73354,73359,73353,73351,73348,73359,73356,73347,73337,73348,73325,73331,73330,73303,73281,73308,73288,73294,73287,73285,73245,73243,73246,73208,73179,73196,73174,73147,73125,73113,73093,73092,73106,73045,73042,73019,73018,73001,72997,72982,72977,72971,72965,72982,72973,72990,72976,72959,72997,72981,73007,73018,73043,73036,73033,73042,73064,73064,73067,73071,73075,73093,73093,73125,73117,73163,73135,73145,73178,73174,73157,73191,73177,73190,73197,73218,73209,73222,73237,73216,73237,73256,73258,73250,73269,73258,73272,73277,73286,73275,73279,73300,73276,73301,73286,73300,73302,73308,73291,73279,73299,73306,73299,73301,73319,73296,73313,73314,73324,73315,73318,73321,73313,73331,73326,73344,73315,73311,73332,73319,73327,73342,73315,73325,73330,73326,73310,73334,73333,73345,73328,73340,73351,73352,73332,73342,73337,73351,73335,73345,73341,73336,73347,73330,73332,73351,73364,73359,73339,73351,73372,73349,73377,73353,73351,73368,73383,73366,73358,73382,73353,73377,73370,73375,73364,73382,73370,73362,73372,73390,73375,73385,73380,73367,73371,73375,73390,73377,73379,73370,73375,73399,73384,73388,73412,73365,73382,73404,73410,73404,73411,73409,73413,73386,73407,73403,73400,73432,73405,73400,73432,73399,73405,73412,73422,73415,73418,73425,73427,73419,73431,73416,73423,73395,73421,73407,73404,73424,73414,73399,73430,73405,73396,73418,73386,73386,73379,73384,73359,73353,73348,73327,73315,73301,73319,73292,73269,73259,73243,73224,73226,73191,73154,73173,73160,73117,73113,73086,73066,73052,73053,73020,73004,73032,73008,72989,73009,72997,72975,72992,73002,73000,72994,72992,73013,73027,73024,73016,73038,73036,73052,73069,73069,73074,73096,73101,73099,73126,73121,73121,73160,73159,73168,73179,73175,73191,73197,73228,73226,73216,73245,73241,73252,73266,73274,73271,73285,73293,73283,73303,73295,73309,73310,73304,73325,73330,73313,73328,73327,73334,73350,73332,73317,73347,73341,73339,73338,73349,73340,73333,73343,73364,73341,73365,73369,73350,73339,73358,73369,73365,73358,73357,73336,73350,73352,73349,73374,73345,73339,73333,73364,73368,73364,73358,73364,73357,73371,73352,73364,73362,73355,73354,73369,73395,73368,73368,73376,73378,73367,73375,73386,73380,73383,73367,73359,73376,73389,73377,73365,73373,73387,73364,73393,73372,73368,73382};
float expected_output_hr_data[DATALEN] = {0.000000,0.001429,0.008960,0.028255,0.063251,0.116771,0.191092,0.286704,0.400277,0.526264,0.658678,0.791671,0.922679,1.051250,1.175708,1.292115,1.393731,1.472606,1.519688,1.523742,1.471295,1.347534,1.138825,0.832456,0.415443,-0.124672,-0.799817,-1.621683,-2.603173,-3.760631,-5.114434,-6.687542,-8.503036,-10.585021,-12.960222,-15.655664,-18.697752,-22.113945,-25.930920,-30.170035,-34.846525,-39.970095,-45.543129,-51.558685,-58.000034,-64.844380,-72.063952,-79.621831,-87.473018,-95.564758,-103.833407,-112.207817,-120.613183,-128.972117,-137.208044,-145.246778,-153.014469,-160.437538,-167.444805,-173.967683,-179.940401,-185.304156,-190.008524,-194.007572,-197.262295,-199.744783,-201.432723,-202.306196,-202.352003,-201.563442,-199.938649,-197.482917,-194.206747,-190.122305,-185.246231,-179.602926,-173.222449,-166.138461,-158.389145,-150.015096,-141.057164,-131.560020,-121.572944,-111.144441,-100.321783,-89.157281,-77.710688,-66.042431,-54.206713,-42.254370,-30.238145,-18.211651,-6.226029,5.671064,17.437052,29.034275,40.422859,51.559232,62.405637,72.929932,83.096327,92.869705,102.223110,111.136110,119.594229,127.585434,135.095329,142.109664,148.616213,154.602840,160.059730,164.983720,169.375632,173.237044,176.573780,179.397927,181.725023,183.568599,184.936440,185.835022,186.273753,186.262880,185.814336,184.944381,183.673385,182.026215,180.032840,177.726345,175.137994,172.294816,169.219920,165.931447,162.445989,158.782092,154.955551,150.979302,146.870959,142.653750,138.350978,133.984099,129.574530,125.142244,120.705268,116.283103,111.894629,107.553814,103.271911,99.059081,94.920991,90.860249,86.882849,82.995060,79.197784,75.491952,71.881100,68.367057,64.949242,61.625423,58.393467,55.252954,52.203332,49.243855,46.376127,43.604182,40.931257,38.359670,35.893706,33.537804,31.295009,29.168611,27.158636,25.258236,23.459858,21.761313,20.162402,18.661518,17.255874,15.941119,14.713703,13.572484,12.514703,11.534890,10.627379,9.785573,9.002614,8.274656,7.600789,6.980951,6.413574,5.893741,5.416395,4.981121,4.588038,4.231148,3.901178,3.590312,3.293787,3.011337,2.744230,2.490368,2.245717,2.007457,1.772585,1.538665,1.306013,1.075343,0.844648,0.609823,0.369271,0.124863,-0.122009,-0.370994,-0.622253,-0.875414,-1.125763,-1.366846,-1.595822,-1.811640,-2.015088,-2.209925,-2.399078,-2.585632,-2.776158,-2.976681,-3.189048,-3.413524,-3.650470,-3.899862,-4.162321,-4.439337,-4.731821,-5.040516,-5.368018,-5.717805,-6.092413,-6.495570,-6.933071,-7.412003,-7.943961,-8.543547,-9.220560,-9.979575,-10.824009,-11.756028,-12.777850,-13.895298,-15.115501,-16.444163,-17.891722,-19.474948,-21.207719,-23.098752,-25.157480,-27.394671,-29.819497,-32.438425,-35.252260,-38.255776,-41.444595,-44.816264,-48.364605,-52.079098,-55.947489,-59.956499,-64.090362,-68.328543,-72.644913,-77.008196,-81.382671,-85.730002,-90.010741,-94.186726,-98.221473,-102.075948,-105.709539,-109.083253,-112.157670,-114.892408,-117.250354,-119.201106,-120.719398,-121.783750,-122.379836,-122.502497,-122.152769,-121.333840,-120.049631,-118.305660,-116.109886,-113.472137,-110.402954,-106.916474,-103.030971,-98.763902,-94.135957,-89.176935,-83.920610,-78.400820,-72.651772,-66.705620,-60.592083,-54.341713,-47.985645,-41.553944,-35.077592,-28.586398,-22.104885,-15.655917,-9.264309,-2.954376,3.251467,9.332567,15.270711,21.048590,26.647432,32.049338,37.240225,42.207572,46.939263,51.424448,55.653959,59.621669,63.323248,66.752088,69.899385,72.759821,75.333069,77.619565,79.621028,81.343353,82.794492,83.983408,84.921521,85.621065,86.092755,86.346682,86.393946,86.246608,85.917905,85.422257,84.773242,83.979940,83.048256,81.986602,80.804926,79.512424,78.118352,76.629994,75.053814,73.399017,71.674246,69.884482,68.035171,66.135578,64.196799,62.229282,60.244232,58.255499,56.275415,54.310112,52.361986,50.434259,48.531327,46.656339,44.810779,42.995288,41.209826,39.454209,37.726914,36.025846,34.353360,32.716891,31.122863,29.573105,28.069864,26.619098,25.226039,23.893136,22.619818,21.403211,20.244017,19.147267,18.114753,17.143391,16.229999,15.371468,14.564552,13.807157,13.096285,12.427640,11.798026,11.204230,10.640886,10.103934,9.593077,9.108248,8.648187,8.211052,7.793026,7.389132,6.996118,6.612614,6.236586,5.864530,5.493183,5.122250,4.755325,4.395504,4.044430,3.704717,3.376064,3.056581,2.750043,2.463315,2.200478,1.964030,1.757782,1.584890,1.444089,1.331120,1.240803,1.168234,1.112090,1.072092,1.047014,1.037883,1.043632,1.057697,1.073999,1.090219,1.105737,1.120999,1.138401,1.160474,1.187560,1.218324,1.250215,1.278382,1.295733,1.295794,1.272896,1.221038,1.137021,1.019750,0.868126,0.683831,0.468359,0.219360,-0.066134,-0.392689,-0.768210,-1.200110,-1.694484,-2.259759,-2.907107,-3.647993,-4.494638,-5.460760,-6.558186,-7.793612,-9.172360,-10.702855,-12.394068,-14.253272,-16.286605,-18.499192,-20.898682,-23.495601,-26.294447,-29.292450,-32.488101,-35.881950,-39.473374,-43.260734,-47.239409,-51.400146,-55.732323,-60.222687,-64.848617,-69.581150,-74.390930,-79.244844,-84.106471,-88.941085,-93.712477,-98.379398,-102.899787,-107.235006,-111.348288,-115.200503,-118.750688,-121.962404,-124.806279,-127.256104,-129.287115,-130.876755,-132.004948,-132.656458,-132.821266,-132.491392,-131.661749,-130.332759,-128.509040,-126.200107,-123.420428,-120.184187,-116.505226,-112.401030,-107.893040,-103.006333,-97.768701,-92.207954,-86.350363,-80.223805,-73.860144,-67.291069,-60.546669,-53.657777,-46.655258,-39.569863,-32.432977,-25.274484,-18.122351,-11.005208,-3.952332,3.007392,9.846166,16.537811,23.057874,29.386029,35.505207,41.397046,47.043028,52.427839,57.540210,62.372310,66.915057,71.156871,75.090136,78.712008,82.019429,85.009610,87.682936,90.041455,92.086964,93.824203,95.262352,96.411377,97.282963,97.892204,98.251951,98.370880,98.259420,97.931757,97.401413,96.679104,95.773809,94.693182,93.445246,92.039039,90.483957,88.790890,86.970012,85.028531,82.975036,80.823862,78.592058,76.293598,73.939907,71.543951,69.120954,66.685410,64.247119,61.811484,59.382659,56.964380,54.561641,52.184722,49.848025,47.561839,45.330187,43.157184,41.048430,39.007387,37.035838,35.136141,33.310215,31.557883,29.875778,28.258329,26.702362,25.207853,23.772405,22.389651,21.055302,19.769529,18.532741,17.344227,16.201246,15.098572};

#define LEN 38
long double input_hr_excerpt[LEN] = {73350,73371,73363,73361,73367,73356,73373,73340,73363,73349,73342,73371,73350,73360,73348,73332,73343,73323,73325,73310,73292,73300,73275,73273,73262,73248,73239,73216,73188,73164,73129,73124,73082,73048,73017,72979,72934,72896};
long double input_impulse[LEN] = {0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
long double input_step[LEN] = {0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
long double input_large_dc[LEN] = {70000,70001,70000,70000,70000,70000,70000,70000,70000,70000,70000,70000,70000,70000,70000,70000,70000,70000,70000,70000,70000,70000,70000,70000,70000,70000,70000,70000,70000,70000,70000,70000,70000,70000,70000,70000,70000,70000};

// ---------- printing functions ----------- //

void print_biquad_impulse(BiQuad f) {
    float output[LEN];
    f.restart();
    for (int i=0; i<LEN; i++) {
        output[i] = f.iter(input_impulse[i]);
        std::cout << output[i] << ",";
    }
    std::cout << std::endl;
}

void print_impulses() {
    print_biquad_impulse(f1);
    print_biquad_impulse(f2);
    print_biquad_impulse(f3);
    print_biquad_impulse(f4);
    print_biquad_impulse(f5);
}

void print_biquad_step(BiQuad f) {
    float output[LEN];
    f.restart();
    for (int i=0; i<LEN; i++) {
        output[i] = f.iter(input_step[i]);
        std::cout << output[i] << ",";
    }
    std::cout << std::endl;
}

void print_biquad_large_dc(BiQuad f) {
    long double output[LEN];
    f.restart();
    for (int i=0; i<LEN; i++) {
        output[i] = f.iter(input_large_dc[i]);
        std::cout << output[i]-output[0] << ",";
    }
    std::cout << std::endl;
}

void print_hr_impulse() {
    long double output[LEN];
    hrfilt.restart();
    for (int i=0; i<LEN; i++) {
        output[i] = hrfilt.iter(input_impulse[i]);
        std::cout << output[i] << ",";
    }
    std::cout << std::endl;
}

void print_hr_output(void) {
    long double output[DATALEN];
    hrfilt.restart();
    for (int i=0; i<DATALEN; i++) {
        output[i] = hrfilt.iter(input_hr_data[i]);
        std::cout << output[i] << ",";
    }
    std::cout << std::endl;
}

// ------------- test functions ------------- //

float expected_output_large_dc_f3[LEN] = {0,0.993756,-0.0124101,-0.0122551,-0.0121021,-0.0119509,-0.0118017,-0.0116543,-0.0115088,-0.0113651,-0.0112231,-0.011083,-0.0109446,-0.0108079,-0.0106729,-0.0105396,-0.010408,-0.010278,-0.0101497,-0.0100229,-0.00989777,-0.00977417,-0.00965211,-0.00953157,-0.00941254,-0.00929499,-0.00917892,-0.00906429,-0.0089511,-0.00883931,-0.00872893,-0.00861992,-0.00851227,-0.00840597,-0.008301,-0.00819733,-0.00809497,-0.00799388};

void test_class_biquad(void) {
    float output[LEN];
    f3.restart();
    for (int i=0; i<LEN; i++) {
        output[i] = f3.iter(input_large_dc[i]);
        output[i] = output[i]-output[0];
    }
    TEST_ASSERT_EQUAL_FLOAT_ARRAY(expected_output_large_dc_f3, output, LEN);
}

void test_class_hrfilter(void) {
    float output[DATALEN];
    hrfilt.restart();
    for (int i=0; i<DATALEN; i++) {
        output[i] = ((float)round(hrfilt.iter(input_hr_data[i])*1E6))/1E6;
    }
    TEST_ASSERT_EQUAL_FLOAT_ARRAY(expected_output_hr_data, output, DATALEN);
}

void test_class_bpm_update(void) {
    bpm.start();
    bpm.update(10);
    TEST_ASSERT_EQUAL_FLOAT(1,test_sampleCount(bpm));
}

void test_class_bpm_prior(void) {
    bpm.start();
    bpm.update(10);
    TEST_ASSERT_EQUAL_FLOAT(1,test_prior(bpm));
}

void test_class_bpm_posterior(void) {
    bpm.start();
    for (int i=0; i<100; i++) {
        bpm.update(input_hr_data[i]);
        // std::cout << test_posterior(bpm) << std::endl;
    }
    TEST_ASSERT_EQUAL_FLOAT(-6776,test_posterior(bpm));
}

void test_class_bpm_state0(void) {
    bpm.start();
    for (int i=0; i<100; i++) {
        bpm.update(input_hr_data[i]);
    }
    TEST_ASSERT_EQUAL(0,test_state(bpm));
}

void test_class_bpm_state2(void) {
    bpm.start();
    for (int i=0; i<SAMPLERATE+1; i++) {
        bpm.update(input_hr_data[i]);
    }
    TEST_ASSERT_EQUAL(2,test_state(bpm));
}

void test_class_bpm_beatCount(void) {
    int beatCount = 0;
    bpm.start();
    for (int i=0; i<DATALEN; i++) {
        bpm.update(input_hr_data[i]);
        if (bpm.available()) {
            beatCount++;
            bpm.next();
        }
        // std::cout << test_state(bpm) << "," << test_lastBeat(bpm) << "," << test_beat(bpm) << "," << test_nextBeat(bpm) << "," << bpm.getBPM() << std::endl;
    }
    TEST_ASSERT_EQUAL(3,beatCount);
}

void test_class_bpm_available(void) {
    bpm.start();
    for (int i=0; i<SAMPLERATE+1; i++) {
        bpm.update(input_hr_data[i]);
    }
    TEST_ASSERT_EQUAL(1,bpm.available());
}

void test_class_bpm_getBPM(void) {
    float val = 0;
    bpm.start();
    for (int i=0; i<DATALEN; i++) {
        bpm.update(input_hr_data[i]);
        if (bpm.available()) {
            val = bpm.getBPM();
            bpm.next();
        }
    }
    TEST_ASSERT_EQUAL_FLOAT(105.822,val);
}

int main( int argc, char **argv) {
    // print_impulses();
    UNITY_BEGIN();
    RUN_TEST(test_class_biquad);
    RUN_TEST(test_class_hrfilter);
    RUN_TEST(test_class_bpm_update);
    RUN_TEST(test_class_bpm_prior);
    RUN_TEST(test_class_bpm_posterior);
    RUN_TEST(test_class_bpm_state0);
    RUN_TEST(test_class_bpm_state2);
    RUN_TEST(test_class_bpm_available);
    RUN_TEST(test_class_bpm_beatCount);
    RUN_TEST(test_class_bpm_getBPM);
    UNITY_END();
    return 0;
}